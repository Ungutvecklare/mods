-- author: DD ModPassion
-- date: 22.11.2021
-- copyright (C): DD ModPassion, All Rights Reserved
-- version: Farming Simulator 22
NetWrapAddon = {} function NetWrapAddon.prerequisitesPresent(specializations) return SpecializationUtil.hasSpecialization(Baler, specializations) and SpecializationUtil.hasSpecialization(FillUnit, specializations) and SpecializationUtil.hasSpecialization(TurnOnVehicle, specializations) end function NetWrapAddon.registerOverwrittenFunctions(vehicleType) SpecializationUtil.registerOverwrittenFunction(vehicleType, "isUnloadingAllowed", NetWrapAddon.isUnloadingAllowed) end function NetWrapAddon.registerEventListeners(vehicleType) SpecializationUtil.registerEventListener(vehicleType, "onLoad", NetWrapAddon) SpecializationUtil.registerEventListener(vehicleType, "onUpdate", NetWrapAddon) SpecializationUtil.registerEventListener(vehicleType, "onDraw", NetWrapAddon) end function NetWrapAddon:onLoad(savegame) local spec = self.spec_baler local key = string.format("vehicle.baler.baleTypes.baleType(0)") spec.isRoundBale = self.xmlFile:getValue(key.."#isRoundBale", false) spec.isInitializedNetWrap = true if spec.isRoundBale and #self.spec_fillUnit.fillUnits > 1 then spec.baleNetWrapTime = 0 spec.baleNetWrapUse = 4000 spec.showNetWrapWarning = false spec.showNetWrapAllowed = false spec.fillingNetWrapAllowed = false spec.needNetWrapFilling = false setCollisionMask(self.rootNode, 8397058) spec.baleNetWrapUsed = spec.baleTypes[spec.currentBaleTypeIndex].diameter * math.pi * 8 if Utils.getNoNil(self.spec_fillUnit.fillUnits[1].supportedFillTypes[g_fillTypeManager:getFillTypeIndexByName("straw")], false) or Utils.getNoNil(self.spec_fillUnit.fillUnits[1].supportedFillTypes[g_fillTypeManager:getFillTypeIndexByName("woodChips")], false) then spec.baleFillLevel = #self.spec_fillUnit.fillUnits-(#self.spec_fillUnit.fillUnits-1) else spec.isInitializedNetWrap = false end if Utils.getNoNil(self.spec_fillUnit.fillUnits[#self.spec_fillUnit.fillUnits].supportedFillTypes[g_fillTypeManager:getFillTypeIndexByName("netwrap")], false) then spec.netWrapFillLevel = #self.spec_fillUnit.fillUnits self.spec_fillUnit.fillUnits[spec.netWrapFillLevel].unitText = g_i18n:getText("unit_meter", self.customEnvironment) else spec.isInitializedNetWrap = false end else spec.isInitializedNetWrap = false end end function NetWrapAddon:onUpdate(dt, isActiveForInput, isActiveForInputIgnoreSelection, isSelected) local spec = self.spec_baler if spec.isInitializedNetWrap then if self:getFillUnitFillLevel(spec.netWrapFillLevel) > 0 then if spec.baleNetWrapTime < spec.baleNetWrapUse and self:getFillUnitFillLevelPercentage(spec.baleFillLevel) > 0.9999 and self:getIsTurnedOn() then spec.baleNetWrapTime = spec.baleNetWrapTime + dt local fillDelta = dt * (spec.baleNetWrapUsed / spec.baleNetWrapUse) self:addFillUnitFillLevel(self:getOwnerFarmId(), spec.netWrapFillLevel, -fillDelta, self:getFillUnitFillType(spec.netWrapFillLevel), ToolType.UNDEFINED, unloadInfo) end end if self:getFillUnitFillLevel(spec.baleFillLevel) <= 0 then if spec.baleNetWrapTime > 0 then spec.baleNetWrapTime = 0 end spec.baleNetWrapUsed = spec.baleTypes[spec.currentBaleTypeIndex].diameter * math.pi * 8 if self:getFillUnitFillLevel(spec.netWrapFillLevel) < spec.baleNetWrapUsed and not self.spec_fillUnit.fillTrigger.isFilling then self:addFillUnitFillLevel(self:getOwnerFarmId(), spec.netWrapFillLevel, -self:getFillUnitFillLevel(spec.netWrapFillLevel), self:getFillUnitFillType(spec.netWrapFillLevel), ToolType.UNDEFINED, unloadInfo) end end if self:getFillUnitFillLevel(spec.netWrapFillLevel) <= 0 then spec.fillingNetWrapAllowed = true if self.spec_fillUnit.fillTrigger.isFilling then spec.needNetWrapFilling = true end end if self:getFillUnitFillLevelPercentage(spec.netWrapFillLevel) == 1 then spec.fillingNetWrapAllowed = false spec.needNetWrapFilling = false end spec.showNetWrapWarning = false if (self:getFillUnitFillLevel(spec.netWrapFillLevel) <= 0 or spec.needNetWrapFilling) and self:getIsTurnedOn() then if self.isClient then spec.showNetWrapWarning = true end self:setIsTurnedOn(false) end spec.showNetWrapAllowed = false if self.spec_fillUnit.fillTrigger.isFilling and not spec.fillingNetWrapAllowed then if self.isClient and self:getFillUnitFillLevelPercentage(spec.netWrapFillLevel) < 1 then spec.showNetWrapAllowed = true end self:setFillUnitIsFilling(not self.spec_fillUnit.fillTrigger.isFilling) end end end function NetWrapAddon:onDraw(isActiveForInput, isActiveForInputIgnoreSelection, isSelected) local spec = self.spec_baler if isActiveForInputIgnoreSelection and spec.isInitializedNetWrap then if self:getFillUnitFillLevel(spec.netWrapFillLevel) <= 0 then g_currentMission:addExtraPrintText(g_i18n:getText("info_firstFillTheNetWrap", self.customEnvironment)) elseif spec.needNetWrapFilling then g_currentMission:addExtraPrintText(g_i18n:getText("info_needFillNetWrap", self.customEnvironment)) end if spec.showNetWrapWarning then if spec.needNetWrapFilling then g_currentMission:showBlinkingWarning(g_i18n:getText("info_needFillNetWrap", self.customEnvironment), 4000) else g_currentMission:showBlinkingWarning(g_i18n:getText("info_firstFillTheNetWrap", self.customEnvironment), 2000) end end if spec.showNetWrapAllowed then g_currentMission:showBlinkingWarning(g_i18n:getText("info_allowFillNetWrap", self.customEnvironment), 4000) end end end function NetWrapAddon:updateDebugValues(values) local spec = self.spec_baler table.insert(values, {name="isInitializedNetWrap", value=spec.isInitializedNetWrap}) if spec.isInitializedNetWrap then table.insert(values, {name="isRoundBale", value=spec.isRoundBale}) table.insert(values, {name="baleNetWrapTime", value=string.format("%.4f", spec.baleNetWrapTime)}) table.insert(values, {name="baleNetWrapUse", value=string.format("%.4f", spec.baleNetWrapUse)}) table.insert(values, {name="baleNetWrapUsed", value=string.format("%.4f", spec.baleNetWrapUsed)}) table.insert(values, {name="spec.baleTypes[spec.currentBaleTypeIndex].diameter", value=string.format("%.4f", spec.baleTypes[spec.currentBaleTypeIndex].diameter)}) table.insert(values, {name="showNetWrapWarning", value=spec.showNetWrapWarning}) table.insert(values, {name="showNetWrapAllowed", value=spec.showNetWrapAllowed}) table.insert(values, {name="needNetWrapFilling", value=spec.needNetWrapFilling}) table.insert(values, {name="fillingNetWrapAllowed", value=spec.fillingNetWrapAllowed}) end end function NetWrapAddon:isUnloadingAllowed() local spec = self.spec_baler if spec.platformReadyToDrop or spec.platformDropInProgress then if spec.unloadingState ~= Baler.UNLOADING_OPEN then return false end end if spec.isInitializedNetWrap then if self.spec_baleWrapper == nil then return (not spec.allowsBaleUnloading or (spec.allowsBaleUnloading and not self:getIsTurnedOn() and not spec.isBaleUnloading)) and (spec.baleNetWrapTime >= spec.baleNetWrapUse or (spec.baleNetWrapTime == 0 and self:getFillUnitFillLevel(spec.baleFillLevel) == 0)) else return self:allowsGrabbingBale() and (spec.baleNetWrapTime >= spec.baleNetWrapUse or (spec.baleNetWrapTime == 0 and self:getFillUnitFillLevel(spec.baleFillLevel) == 0)) end end if self.spec_baleWrapper == nil then return not spec.allowsBaleUnloading or (spec.allowsBaleUnloading and not self:getIsTurnedOn() and not spec.isBaleUnloading) end return self:allowsGrabbingBale() end