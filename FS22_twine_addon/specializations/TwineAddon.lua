-- author: DD ModPassion
-- date: 22.11.2021
-- copyright (C): DD ModPassion, All Rights Reserved
-- version: Farming Simulator 22
TwineAddon = {} function TwineAddon.prerequisitesPresent(specializations) return SpecializationUtil.hasSpecialization(Baler, specializations) and SpecializationUtil.hasSpecialization(FillUnit, specializations) and SpecializationUtil.hasSpecialization(TurnOnVehicle, specializations) end function TwineAddon.registerEventListeners(vehicleType) SpecializationUtil.registerEventListener(vehicleType, "onLoad", TwineAddon) SpecializationUtil.registerEventListener(vehicleType, "onUpdate", TwineAddon) SpecializationUtil.registerEventListener(vehicleType, "onDraw", TwineAddon) end function TwineAddon:onLoad(savegame) local spec = self.spec_baler local key = string.format("vehicle.baler.baleTypes.baleType(0)") spec.isRoundBale = self.xmlFile:getValue(key.."#isRoundBale", false) spec.isInitializedTwine = true if not spec.isRoundBale and #self.spec_fillUnit.fillUnits > 1 then spec.onFillFillLevelChanged = 0 spec.showTwineWarning = false spec.showTwineAllowed = false spec.fillingTwineAllowed = false spec.needTwineFilling = false setCollisionMask(self.rootNode, 8397058) spec.baleTwineUsed = (spec.baleTypes[spec.currentBaleTypeIndex].height + spec.baleTypes[spec.currentBaleTypeIndex].length) * 2 * self:getFillUnitCapacity(#self.spec_fillUnit.fillUnits)/6000/6 if Utils.getNoNil(self.spec_fillUnit.fillUnits[1].supportedFillTypes[g_fillTypeManager:getFillTypeIndexByName("straw")], false) then spec.baleFillLevel = #self.spec_fillUnit.fillUnits-(#self.spec_fillUnit.fillUnits-1) else spec.isInitializedTwine = false end if Utils.getNoNil(self.spec_fillUnit.fillUnits[#self.spec_fillUnit.fillUnits].supportedFillTypes[g_fillTypeManager:getFillTypeIndexByName("twine")], false) then spec.twineFillLevel = #self.spec_fillUnit.fillUnits self.spec_fillUnit.fillUnits[spec.twineFillLevel].unitText = g_i18n:getText("unit_meter", self.customEnvironment) else spec.isInitializedTwine = false end else spec.isInitializedTwine = false end end function TwineAddon:onUpdate(dt, isActiveForInput, isActiveForInputIgnoreSelection, isSelected) local spec = self.spec_baler if spec.isInitializedTwine then local fillLevelPercentage = self:getFillUnitFillLevelPercentage(spec.baleFillLevel) if fillLevelPercentage ~= spec.onFillFillLevelChanged and fillLevelPercentage > spec.onFillFillLevelChanged then local fillDelta = spec.baleTwineUsed * (fillLevelPercentage - spec.onFillFillLevelChanged) self:addFillUnitFillLevel(self:getOwnerFarmId(), spec.twineFillLevel, -fillDelta, self:getFillUnitFillType(spec.twineFillLevel), ToolType.UNDEFINED, unloadInfo) end spec.onFillFillLevelChanged = fillLevelPercentage if self:getFillUnitFillLevel(spec.baleFillLevel) <= 0 and self:getFillUnitFillLevel(spec.twineFillLevel) < spec.baleTwineUsed then spec.baleTwineUsed = (spec.baleTypes[spec.currentBaleTypeIndex].height + spec.baleTypes[spec.currentBaleTypeIndex].length) * 2 * 6 self:addFillUnitFillLevel(self:getOwnerFarmId(), spec.twineFillLevel, -self:getFillUnitFillLevel(spec.twineFillLevel), self:getFillUnitFillType(spec.twineFillLevel), ToolType.UNDEFINED, unloadInfo) end if self:getFillUnitFillLevel(spec.twineFillLevel) <= 0 then spec.fillingTwineAllowed = true if self.spec_fillUnit.fillTrigger.isFilling then spec.needTwineFilling = true end end if self:getFillUnitFillLevelPercentage(spec.twineFillLevel) == 1 then spec.fillingTwineAllowed = false spec.needTwineFilling = false end spec.showTwineWarning = false if (self:getFillUnitFillLevel(spec.twineFillLevel) <= 0 or spec.needTwineFilling) and self:getIsTurnedOn() then if self.isClient then spec.showTwineWarning = true end self:setIsTurnedOn(false) end spec.showTwineAllowed = false if self.spec_fillUnit.fillTrigger.isFilling and not spec.fillingTwineAllowed then if self.isClient and self:getFillUnitFillLevelPercentage(spec.twineFillLevel) < 1 then spec.showTwineAllowed = true end self:setFillUnitIsFilling(not self.spec_fillUnit.fillTrigger.isFilling) end end end function TwineAddon:onDraw(isActiveForInput, isActiveForInputIgnoreSelection, isSelected) local spec = self.spec_baler if isActiveForInputIgnoreSelection and spec.isInitializedTwine then if self:getFillUnitFillLevel(spec.twineFillLevel) <= 0 then g_currentMission:addExtraPrintText(g_i18n:getText("info_firstFillTheTwine", self.customEnvironment)) elseif spec.needTwineFilling then g_currentMission:addExtraPrintText(g_i18n:getText("info_needFillTwine", self.customEnvironment)) end if spec.showTwineWarning then if spec.needTwineFilling then g_currentMission:showBlinkingWarning(g_i18n:getText("info_needFillTwine", self.customEnvironment), 4000) else g_currentMission:showBlinkingWarning(g_i18n:getText("info_firstFillTheTwine", self.customEnvironment), 2000) end end if spec.showTwineAllowed then g_currentMission:showBlinkingWarning(g_i18n:getText("info_allowFillTwine", self.customEnvironment), 4000) end end end function TwineAddon:updateDebugValues(values) local spec = self.spec_baler table.insert(values, {name="isInitializedTwine", value=spec.isInitializedTwine}) if spec.isInitializedTwine then table.insert(values, {name="isRoundBale", value=spec.isRoundBale}) table.insert(values, {name="onFillFillLevelChanged", value=string.format("%.4f", spec.onFillFillLevelChanged)}) table.insert(values, {name="baleTwineUsed", value=string.format("%.4f", spec.baleTwineUsed)}) table.insert(values, {name="spec.baleTypes[spec.currentBaleTypeIndex].length", value=string.format("%.4f", spec.baleTypes[spec.currentBaleTypeIndex].length)}) table.insert(values, {name="spec.baleTypes[spec.currentBaleTypeIndex].height", value=string.format("%.4f", spec.baleTypes[spec.currentBaleTypeIndex].height)}) table.insert(values, {name="showTwineWarning", value=spec.showTwineWarning}) table.insert(values, {name="showTwineAllowed", value=spec.showTwineAllowed}) table.insert(values, {name="needTwineFilling", value=spec.needTwineFilling}) table.insert(values, {name="fillingTwineAllowed", value=spec.fillingTwineAllowed}) end end